This style of access is clear, concise, and convenient. The use of iterators pervades and unifies Python. Behind the scenes, the for
statement calls iter() on the container object. The function returns an iterator object that defines the method __next__() which accesses
elements in the container one at a time. When there are no more elements, __next__() raises a StopIteration exception which tells the for
loop to terminate. You can call the __next__() method using the next() built-in function; this example shows how it all works:

>>>
>>> s = 'abc'
>>> it = iter(s)
>>> it
<iterator object at 0x00A1DB50>
>>> next(it)
'a'
>>> next(it)
'b'
>>> next(it)
'c'
>>> next(it)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    next(it)
StopIteration